name: test-and-deploy

on:
  workflow_call:
  push:
    branches:
        - 'main'
        - 'feature/*'
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
      - name: Test with pytest
        run: python -m pytest ./test          
        
  docker_publish_image:
    needs: test
    runs-on: ubuntu-latest
    steps:
        - name: checkout the code
          uses: actions/checkout@v4
          with:
                fetch-depth: 0
        - name: Login to Docker Hub
          uses: docker/login-action@v3
          with:
                  username: ${{ secrets.DOCKERHUB_USERNAME }}
                  password: ${{ secrets.DOCKERHUB_TOKEN }}
        - name: build the docker image
          run: |
                docker build -t hello-docker-hub:0.0.1 .
        - name: tagging the docker image
          run: |
                 docker tag hello-docker-hub:0.0.1  ayushsamarth/hello-docker-hub:0.0.1
        - name:  Push the image to docker hub
          run: |
                 docker push ayushsamarth/hello-docker-hub:0.0.1

  deploy-azure:
    needs: docker_publish_image
    runs-on: ubuntu-latest
    steps:
      - name: 'Az CLI login'
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  
      - name: 'Run Azure CLI commands'
        run: |
          az containerapp up \
            --name my-container-app \
            --resource-group my-container-apps \
            --location centralus \
            --environment 'my-container-apps' \
            --image pedrojunqueira/mycontainer:latest \
            --target-port 80 \
            --ingress external \
            --query properties.configuration.ingress.fqdn
